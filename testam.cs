// Skeleton generated by Hyland Unity Editor on 3/17/2021 12:18:40 AM
namespace testam
{
    using System;
    using System.Text;
    using Hyland.Unity;
    using Hyland.Unity.CodeAnalysis;
    using Hyland.Unity.Workflow;
	using System.IO;
    
    
    /// <summary>
    /// testam
    /// </summary>
    public class testam : Hyland.Unity.IWorkflowScript
    {
		string sAcctNum = string.Empty;
		string sCarrier = string.Empty;
		string sBeneficiary = string.Empty;
		string sDOS = string.Empty;
		string sCCN = string.Empty;
		string sHIC = string.Empty;
		string sDOD = string.Empty;
		string sHCPC = string.Empty;
		
		Application _app = null;
        #region IWorkflowScript
        /// <summary>
        /// Implementation of <see cref="IWorkflowScript.OnWorkflowScriptExecute" />.
        /// <seealso cref="IWorkflowScript" />
        /// </summary>
        /// <param name="app"></param>
        /// <param name="args"></param>
        public void OnWorkflowScriptExecute(Hyland.Unity.Application app, Hyland.Unity.WorkflowEventArgs args)
        {
			_app=app;
			Document doc = args.Document;
            SetKeywordValues(doc);
			string sTemplateName = string.Empty;
			if((sCarrier.ToUpper().IndexOf("NATIONAL HERITAGE")>0) || (sCarrier.ToUpper().IndexOf("NHIC")>0)||(sCarrier.ToUpper().IndexOf("REGION A")>0))
				sTemplateName = "reviewregiona.rtf";
			else if((sCarrier.ToUpper().IndexOf("ADMINISTRATOR")>0)||(sCarrier.ToUpper().IndexOf("NATIONAL GOVERNMENT SERVICES")>0)||(sCarrier.ToUpper().IndexOf("REGION B")>0)||(sCarrier.ToUpper().IndexOf("NGS")>0)||(sCarrier.ToUpper().IndexOf("NGS, INC. JURISDICTION B DME MAC")>0))
				sTemplateName = "reviewregionb.rtf";
			else if((sCarrier.ToUpper().IndexOf("PALMETTO")>0)||(sCarrier.ToUpper().IndexOf("CIGNA                C")>0)||(sCarrier.ToUpper().IndexOf("REGION C")>0)||(sCarrier.ToUpper().IndexOf("CIGNA GOVERNMENT SERVICES")>0))
				sTemplateName = "reviewregionc.rtf";
			else if((sCarrier.ToUpper().IndexOf("NAS")>0)||(sCarrier.ToUpper().IndexOf("NORIDIAN")>0)||(sCarrier.ToUpper().IndexOf("NORIDIAN ADMINISTRATIVE SERVICES")>0)||(sCarrier.ToUpper().IndexOf("CIGNA                D")>0)||(sCarrier.ToUpper().IndexOf("REGION D")>0)||(sCarrier.ToUpper().IndexOf("CIGNA - MEDICARE")>0))
				sTemplateName = "reviewregiond.rtf";
			
			string sTemplate = File.ReadAllText(@"\\3SG.net\applications\EC500\ONB\PRD_SYS\OnBaseFiles\Forms\MedicareReviews\" + sTemplateName);
			sTemplate = sTemplate.Replace("#BENEFICIARY#",sBeneficiary);
			sTemplate = sTemplate.Replace("#DOS#",sDOS);
			sTemplate = sTemplate.Replace("#CCN#",sCCN);
			sTemplate = sTemplate.Replace("#HIC#",sHIC);
			sTemplate = sTemplate.Replace("#DOD#",sDOD);
			sTemplate = sTemplate.Replace("#HCPC#",sHCPC);
			sTemplate = sTemplate.Replace("#REASON#","The written/verbal order indicates a medical necessity of ...");
			sTemplate = sTemplate.Replace("#DATE#",DateTime.Now.ToShortDateString());
			
			string sFirstName = string.Empty;
			string sLastName = string.Empty;
			string[] sBeneficiaryFirstLast = sBeneficiary.Split(',');
			if(sBeneficiaryFirstLast.Length>1)
			{
				sFirstName = sBeneficiaryFirstLast[1].ToString();
			}
			sLastName = sBeneficiaryFirstLast[0].ToString();
			sBeneficiary = sFirstName + "_" + sLastName;
			sBeneficiary = sBeneficiary.Replace(",","").Replace(" ","").Replace("'","");
			string sFileName = "ReviewLetter_"+sBeneficiary+"_"+doc.ID+".rtf";
			string sFilePath = @"\\CORP.3SG.COM\ONB\PRD_SRC\Billing\MedicareReviews\" + sFileName;
			File.AppendAllText(sFilePath,sTemplate);
			if(File.Exists(sFilePath))
			{
				System.Diagnostics.Process.Start(sFilePath);
			}
			
        }
		
		private void SetKeywordValues(Document document)
		{
			try
		   	{
		   		foreach(KeywordRecord keywordRecord in document.KeywordRecords)
		        {
		        	foreach(Keyword keyword in keywordRecord.Keywords)
		            {
		            	switch (keyword.KeywordType.Name)
		                {
		                    case "AR - Account Number":
		                        sAcctNum = keyword.IsBlank ? string.Empty : keyword.Value.ToString();
		                        break;							
							case "AR - Carrier Name":
		                        sCarrier = keyword.IsBlank ? string.Empty : keyword.Value.ToString();
		                        break;							
							case "AR - Date of Service":
		                        sDOS = keyword.IsBlank ? string.Empty : keyword.Value.ToString();
		                        break;							
							case "AR - CCN":
		                        sCCN = keyword.IsBlank ? string.Empty : keyword.Value.ToString();
		                        break;							
							case "AR - Patient ID":
		                        sHIC = keyword.IsBlank ? string.Empty : keyword.Value.ToString();
		                        break;							
							case "AR - Payment Date":
		                        sDOD = keyword.IsBlank ? string.Empty : keyword.Value.ToString();
		                        break;							
							case "AR - Procedure Code":
		                        sHCPC = keyword.IsBlank ? string.Empty : sHCPC + keyword.Value.ToString() + " ";
		                        break;							
							case "AR - Account Name":
		                        sBeneficiary = keyword.IsBlank ? string.Empty : keyword.Value.ToString();
		                        break;
						}
					}
				}
		   }
		   catch(Exception ex)
		   {
		   		_app.Diagnostics.Write(ex);
		   }
		}
		
        #endregion
    }
}
