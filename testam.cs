// Skeleton generated by Hyland Unity Editor on 3/17/2021 12:18:40 AM
namespace testam
{
    using System;
    using System.Text;
    using Hyland.Unity;
    using Hyland.Unity.CodeAnalysis;
    using Hyland.Unity.Workflow;
	using System.IO;
    
    
    /// <summary>
    /// testam
    /// </summary>
    public class testam : Hyland.Unity.IWorkflowScript
    {
		string sAccountNumber = string.Empty;
		string sAccountName = string.Empty;
		string sCarrierName = string.Empty;
		string sBenefitAmount = string.Empty;
		string sDateofService = string.Empty;
		string sClaimNumber = string.Empty;
		string sPatientID = string.Empty;
		
		Application _app = null;
        #region IWorkflowScript
        /// <summary>
        /// Implementation of <see cref="IWorkflowScript.OnWorkflowScriptExecute" />.
        /// <seealso cref="IWorkflowScript" />
        /// </summary>
        /// <param name="app"></param>
        /// <param name="args"></param>
        public void OnWorkflowScriptExecute(Hyland.Unity.Application app, Hyland.Unity.WorkflowEventArgs args)
        {
            
			try
			{
				_app = app;
				Document doc = args.Document;
				SetKeywordValues(doc);
				string fileNameWithPath = @"\\3SG\.corp.rghent.com\Users\Billing\OnBase Logs\MED_MA67_LOG.csv";
				string line = (char)34 +  sAccountNumber + (char)34 + ", _"+
					(char)34 +  sAccountName + (char)34 + ", _"+
					(char)34 +  sCarrierName + (char)34 + ", _"+
					(char)34 +  sBenefitAmount + (char)34 + ", _"+
					(char)34 +  sDateofService + (char)34 + ", _"+
					(char)34 +  sClaimNumber + (char)34 + ", _"+
					(char)34 +  sPatientID + (char)34 + ", _"+System.DateTime.Now.ToString("MM-dd-yyyy HH:mm:ss")+Environment.NewLine;
				
				File.AppendAllText(fileNameWithPath, line);
				
			}
			catch(Exception ex)
			{
				app.Diagnostics.Write(ex);
			}
			
			
        }
		
		private void SetKeywordValues(Document document)
		{
			try
		   	{
		   		foreach(KeywordRecord keywordRecord in document.KeywordRecords)
		        {
		        	foreach(Keyword keyword in keywordRecord.Keywords)
		            {
		            	switch (keyword.KeywordType.Name)
		                {
		                    case "AR - Account Number":
		                        sAccountNumber = keyword.IsBlank ? string.Empty : keyword.Value.ToString();
		                        break;
							case "AR - Account Name":
		                        sAccountNumber = keyword.IsBlank ? string.Empty : keyword.Value.ToString();
		                        break;
							case "AR - Carrier Name":
		                        sCarrierName = keyword.IsBlank ? string.Empty : keyword.Value.ToString();
		                        break;
							case "AR - Benefit Amount":
		                        sBenefitAmount = keyword.IsBlank ? string.Empty : keyword.Value.ToString();
		                        break;
							case "AR - Date of Service":
		                        sDateofService = keyword.IsBlank ? string.Empty : keyword.Value.ToString();
		                        break;
							case "AR - Claim Number":
		                        sClaimNumber = keyword.IsBlank ? string.Empty : keyword.Value.ToString();
		                        break;
							case "AR - Patient ID":
		                        sPatientID = keyword.IsBlank ? string.Empty : keyword.Value.ToString();
		                        break;
						}
					}
				}
		   }
		   catch(Exception ex)
		   {
		   		_app.Diagnostics.Write(ex);
		   }
		}
		
        #endregion
    }
}
