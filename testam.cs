// Skeleton generated by Hyland Unity Editor on 3/17/2021 12:18:40 AM
namespace testam
{
    using System;
    using System.Text;
    using Hyland.Unity;
    using Hyland.Unity.CodeAnalysis;
    using Hyland.Unity.Workflow;
	using System.IO;
    
    
    /// <summary>
    /// testam
    /// </summary>
    public class testam : Hyland.Unity.IWorkflowScript
    {
        
        #region IWorkflowScript
        /// <summary>
        /// Implementation of <see cref="IWorkflowScript.OnWorkflowScriptExecute" />.
        /// <seealso cref="IWorkflowScript" />
        /// </summary>
        /// <param name="app"></param>
        /// <param name="args"></param>
        public void OnWorkflowScriptExecute(Hyland.Unity.Application app, Hyland.Unity.WorkflowEventArgs args)
        {
            Document doc = args.Document;	
			KeywordModifier keyMod = doc.CreateKeywordModifier();
			string fileNameWithPath =@"\\SomePath\"+ doc.ID+".pcl";
			if(File.Exists(fileNameWithPath))
			{
				string sAllPCL = File.ReadAllText(fileNameWithPath);
				string sPCL = sAllPCL;
				if(sPCL.Length>0)
				{
					int iPos = 0;
					#region RemarkCodes
					iPos = sPCL.IndexOf("Remark Codes",0);
					if(iPos>0)
					{
						sPCL = sPCL.PadRight(sPCL.Length-iPos);
						bool bRemarks = true;
						while(bRemarks)
						{
							iPos = sPCL.IndexOf("*p33x",0);
							if(iPos>0)
							{
								sPCL = sPCL.PadRight(sPCL.Length-(iPos+9));
								int iRemarkEndPos = sPCL.IndexOf((char)27);
								string sRemark = sPCL.PadLeft(iRemarkEndPos-1);	
								keyMod.AddKeyword("AR - Error Code",sRemark);
								//AddKeywordToDocument(doc,"AR - Error Code",sRemark);
								
							}
							else
								bRemarks=false;
						}
					}
					#endregion
					
					#region Payment Information					
					#endregion
					
					#region Patient ID
					#endregion
					
					#region Procedure Code
					#endregion
					
					#region Check Method
					#endregion
					
					#region Check Number
					#endregion
					
					#region Check Amount
					#endregion
					
					#region Carrier Name
					#endregion
				}
				else
					app.Diagnostics.Write("File size is zero");
			}
			else
				app.Diagnostics.Write("File "+doc.ID+".pcl doesn't exist on the given path");
			
        }
		private void AddKeywordToDocument(Document doc, string keywordType, string keywordValue)
		{
			Keyword key = null;
			KeywordRecordList keyRecList = doc.KeywordRecords;
			foreach(KeywordRecord keyRec in keyRecList)
			{
				EditableKeywordRecord editKeyRec = keyRec.CreateEditableKeywordRecord();
				editKeyRec.AddKeyword(keywordType,keywordValue);
			}
		}
        #endregion
    }
}