// Skeleton generated by Hyland Unity Editor on 3/17/2021 12:18:40 AM
namespace testam
{
    using System;
    using System.Text;
    using Hyland.Unity;
    using Hyland.Unity.CodeAnalysis;
    using Hyland.Unity.Workflow;
	using System.IO;
	using System.Data;
	using System.Data.SqlClient;
    
    
    /// <summary>
    /// testam
    /// </summary>
    public class testam2 : Hyland.Unity.IWorkflowScript
    {

		Application _app = null;
		string sAcctNum = string.Empty;
		string sBarcode = string.Empty;
		
        #region IWorkflowScript
        /// <summary>
        /// Implementation of <see cref="IWorkflowScript.OnWorkflowScriptExecute" />.
        /// <seealso cref="IWorkflowScript" />
        /// </summary>
        /// <param name="app"></param>
        /// <param name="args"></param>
        public void OnWorkflowScriptExecute(Hyland.Unity.Application app, Hyland.Unity.WorkflowEventArgs args)
        {
            
			try
			{
				_app = app;
				Document doc = args.Document;
				long sDocumentHandle = doc.ID;
				string sFileName = sDocumentHandle+".xml";
				string sFilePath = @"\\CORP.RGHENT.COM\ONB\PRD_SRC\Temp\";
				string sXML = File.ReadAllText(sFilePath+sFileName);
				string sDate = string.Empty;
				bool bValidate = true;
				string sDOS = string.Empty;
				int Month = 0;
				int Day = 0;
				int Year = 0;
				
				int iPos =0;
				iPos = sXML.IndexOf("<DTP03>",0);
				if(iPos>0)
				{
					sDate = sXML.Substring(iPos+7,8);
				}
				if(sDate != string.Empty)
				{
					string yyyy = sDate.Substring(0,4);
					string mm = sDate.Substring(4,2);
					string dd = sDate.Substring(6,2);
					
					int.TryParse(mm, out Month);
					int.TryParse(dd, out Day);
					int.TryParse(yyyy, out Year);
					
					if(Month == 0 || Day == 0 || Year == 0)
						bValidate = false;
					if(Month>12)
						bValidate = false;
					if(Day>31)
						bValidate = false;
					if(Day > 29 && Month ==2)
						bValidate = false;
					if(Day==29 && Month ==2)
					{
						if((Year%4 != 0)||(Year%100==0 && Year%400 !=0))
							bValidate = false;
					}
					if((Day==31)&&(Month ==2 || Month==4 || Month==6 || Month==9 || Month==11))
						bValidate = false;
				}
				
				if(bValidate)
				{
					sDOS = Month+"/"+Day+"/"+Year;
				}
				if(IsDate(sDOS))
				{
					ModifyKeywordInCurrentDocument(doc,"AR - Date of Service",sDOS);
				}
				
			}
			catch(Exception ex)
			{
				app.Diagnostics.Write(ex);
			}
			
			
        }
		private bool IsDate(string dateFormat)
		{
			try
			{
				int month = Convert.ToInt32(dateFormat.Substring(0,2));
				int day = Convert.ToInt32(dateFormat.Substring(3,2));
				string year = dateFormat.Substring(6,4);
				if(( month < 0 && month > 12) || (day <1 && day>31)||(year.Length != 4))
				{
					return false;
				}
				else
				{
					return  true;
				}
			}
			catch
			{
				return false;
			}
		}
		private void ModifyKeywordInCurrentDocument(Document doc, string keywordType, string keywordValue)
		{
			using(DocumentLock documentLock = doc.LockDocument())
			{
				if(documentLock.Status == DocumentLockStatus.LockObtained)
				{
					KeywordModifier keymod = doc.CreateKeywordModifier();
					KeywordType keyType = _app.Core.KeywordTypes.Find(keywordType);
					if(keyType == null)
					{
						keymod.AddKeyword(keywordType,keywordValue);		
						
					}
					else
					{
						KeywordRecord keyRec = doc.KeywordRecords.Find(keyType);
						KeywordRecordType keyRecType = keyRec.KeywordRecordType;			
						
						Keyword newKeyword = keyType.CreateKeyword(keywordValue);
						
						if(keyRecType.RecordType== RecordType.MultiInstance)
						{
							EditableKeywordRecord editKeyRec = keyRec.CreateEditableKeywordRecord();
							Keyword keyword = editKeyRec.Keywords.Find(keywordType);
							editKeyRec.UpdateKeyword(keyword, newKeyword);
							keymod.AddKeywordRecord(editKeyRec);
							
						}
						else
						{
							Keyword keyword = keyRec.Keywords.Find(keywordType);
							if(keyword!=null)
								keymod.UpdateKeyword(keyword, newKeyword);
							else
								keymod.AddKeyword(keywordType, keywordValue);
						}
					}
					keymod.ApplyChanges();					
				}
			}
		}
		
		
        #endregion
    }
}
