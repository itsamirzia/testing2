
// Skeleton generated by Hyland Unity Editor on 3/17/2021 12:18:40 AM
namespace testam1
{
    using System;
    using System.Text;
    using Hyland.Unity;
    using Hyland.Unity.CodeAnalysis;
    using Hyland.Unity.Workflow;
	using System.IO;
	using System.Data;
	using System.Data.SqlClient;
	using Microsoft.Office.Tools.Word;
	
    /// <summary>
    /// testam
    /// </summary>
    public class testam1 : Hyland.Unity.IWorkflowScript
    {
		Hyland.Unity.Application _app= null;
		string[] arrSearchValue = new string[20];
		string[] arrReplacementValue = new string[20];
		string[] arrVariable = null;
		
		string strAccountName = string.Empty;
		string strAccountNumber = string.Empty;
		string strCarrierName = string.Empty;
		string strConn = string.Empty;
		string strDateTime = string.Empty;
		string strDay = string.Empty;
		string strDBDatabase = string.Empty;
		string strDBPassword = string.Empty;
		string strDBServer = string.Empty;
		string strDBUsername = string.Empty;
		string strDocHandle = string.Empty;
		string strDocType = string.Empty;
		string strElement = string.Empty;
		string strEmployeeName = string.Empty;
		string strErrorCodes = string.Empty;
		string strItemNum = string.Empty;
		string strMonthDayYear = string.Empty;
		string strMonth = string.Empty;
		string strOutput = string.Empty;
		string strOutput2 = string.Empty;
		string strPatientName = string.Empty;
		string strPrint = string.Empty;
		string strVariable = string.Empty;
		string strYear = string.Empty;
		
		
		
        #region IWorkflowScript
        /// <summary>
        /// Implementation of <see cref="IWorkflowScript.OnWorkflowScriptExecute" />.
        /// <seealso cref="IWorkflowScript" />
        /// </summary>
        /// <param name="app"></param>
        /// <param name="args"></param>
        public void OnWorkflowScriptExecute(Hyland.Unity.Application app, Hyland.Unity.WorkflowEventArgs args)
        {
         	_app=app;   
			try
			{
				Hyland.Unity.Document doc = args.Document;
				strDocHandle = doc.ID.ToString();
				strDocType = doc.DocumentType.Name;

				strDBServer = "WPEC5009onbsq01.cardinalhealth.net";
				strDBUsername = "HSI";
				strDBPassword = "wstinol";
				strDBDatabase = "ONBASE";
				strConn = "Server="+strDBServer+"; Database="+strDBDatabase+"; user="+strDBUsername+"; passowrd="+strDBPassword+"";
				string sql = "select statenum, itemnum from hsi.itmlc (NOLOCK) where itemnum = '"+strDocHandle+"'";
				DataTable dt = SelectDataRows(strConn, sql);
				string Queue = dt.Rows[0]["statenum"].ToString();
				strItemNum = dt.Rows[0]["itemnum"].ToString();
				
				sql = "select itemtypenum from hsi.itemdata (NOLOCK) where itemnum = '"+strItemNum+"'";
				dt = SelectDataRows(strConn, sql);
				string DocType = dt.Rows[0]["itemtypenum"].ToString();
				switch(DocType)
				{
					case "136":
						switch(Queue)
					{
							case "171":
							case "176":
							case "185":
							case "209":
							case "214":
							case "223":
								arrSearchValue[0]="AR - Patient Name";
								arrSearchValue[1]="AR - Account Number";
								arrSearchValue[2]="LTR - Date Created";
								arrSearchValue[3]="AR - Address 1";
								arrSearchValue[4]="AR - Address 2";
								arrSearchValue[5]="AR - City";
								arrSearchValue[6]="AR - State";
								arrSearchValue[7]="AR - Zip Code";
								arrSearchValue[8]="LTR - EMPLOYEE NAME";
								arrSearchValue[9]="LTR - EMPLOYEE NAME";
								arrSearchValue[10]="LTR - PHONE";
								arrSearchValue[11]="AR - Patient Name";
								arrSearchValue[12]="LTR - BARCODE";
								arrSearchValue[13]="AR - Carrier Name";
								arrSearchValue[14]="AR - Error Code";
								arrSearchValue[15]="LTR - BARCODE";
								arrSearchValue[16]="AR - Carrier Name";
								SetKeywordValues(doc);
								string[] arrBeneficiary = null;
								
								if(strAccountNumber != string.Empty)
								{
									int iPos=0;
									string strFirstName ="";
									string[] arrFirstName=null;
									iPos = strAccountName.IndexOf(",");
									if(iPos>0)
										arrBeneficiary = strAccountName.Split(',');
									else
										arrBeneficiary = strAccountName.Split(' ');
									string strLastName = arrBeneficiary[0].Trim();
									strLastName = strLastName.Substring(0,1).ToUpper() + strLastName.Substring(1).ToLower();
									if(arrBeneficiary.Length>0)
									{
										strFirstName = arrBeneficiary[1].Trim();
										arrFirstName = strFirstName.Split(' ');
										strFirstName = arrFirstName[0].Trim();
										strFirstName = strFirstName.Substring(0,1).ToUpper()+strFirstName.Substring(1).ToLower();
										if(arrFirstName.Length>0)
										{
											string strMiddle = "";
											string strSubTitle="";
											strMiddle = arrFirstName[1].Trim().ToUpper();
											if(strMiddle.Length == 0)
											{
												strMiddle = strMiddle.Replace(".",",");
												strMiddle = strMiddle + ".";
											}
											else
												strMiddle = strMiddle.Substring(0,1).ToUpper()+strMiddle.Substring(1).ToLower();
											
											switch(strMiddle)
											{
												case "Jr":
												case "Junior":
												case "Sr":
												case "Senior":
													strSubTitle = strMiddle;
													strMiddle = "";
													break;
											}
											if(strMiddle.Length >0)
											{
												arrReplacementValue[0] = strFirstName+" "+strMiddle +" "+strLastName+" "+strSubTitle;
												arrReplacementValue[11] = strFirstName+" "+strMiddle +" "+strLastName+" "+strSubTitle;
												arrReplacementValue[1]= strAccountNumber;
											}
											else
											{
												arrReplacementValue[0] = strFirstName +" "+strLastName+" "+strSubTitle;
												arrReplacementValue[11] = strFirstName +" "+strLastName+" "+strSubTitle;
												arrReplacementValue[1]= strAccountNumber;
											}
										}
									}
									else
									{
										arrReplacementValue[0] = strLastName;
										arrReplacementValue[11] = strLastName;
										arrReplacementValue[1]= strAccountNumber;
									}
									strMonth = DateTime.Now.Month.ToString();
								strDay = DateTime.Now.Day.ToString();
								strYear = DateTime.Now.Year.ToString();
								strMonthDayYear = strMonth +" "+strDay+", "+strYear;
								arrReplacementValue[2]=strMonthDayYear;
								
								strDateTime = DateTime.Now.ToString("MMddyyyyHHmmss");
								sql = "select  ks101, ks173, ks174, ks176, ks177, ks178 from keysetdata112 (NOLOCK) where ks101='"+strAccountNumber+"'";
								dt.Clear();
								dt = SelectDataRows(strConn, sql);
								
								strVariable = "";
								arrVariable = null;
								strElement = "";
								strOutput = "";
								strVariable = dt.Rows[0]["ks173"].ToString();
								if(strVariable.Length > 0)
								{
									string[] arrVariable = strVariable.Split(' ');
									if(arrVariable.Length>0)
									{
										foreach(string variable in arrVariable)
										{
											strElement = variable;
											int result = 0;
											if(int.TryParse(strElement.Substring(0,1), out result))
												strOutput+=strElement+" ";
											else
											{
												strElement = strElement.Substring(0,1).ToUpper()+strElement.Substring(1).ToLower();
												strOutput += strElement+" ";
											}
										}
									}
									else
										strOutput = strVariable.Substring(0,1).ToUpper()+strVariable.Substring(1).ToLower();
									arrReplacementValue[3]=strOutput;
								}
								else
								{
									arrReplacementValue[3]="";
								}
								
								strVariable = "";
								arrVariable = null;
								strElement = "";
								strOutput = "";
								strVariable = dt.Rows[0]["ks174"].ToString();
								if(strVariable.Length > 0)
								{
									string[] arrVariable = strVariable.Split(' ');
									if(arrVariable.Length>0)
									{
										foreach(string variable in arrVariable)
										{
											strElement = variable;
											strElement = strElement.Substring(0,1).ToUpper()+strElement.Substring(1).ToLower();
											strOutput += strElement+" ";
										}
									}
									else
										strOutput = strVariable.Substring(0,1).ToUpper()+strVariable.Substring(1).ToLower();
									
									arrReplacementValue[4]=strOutput;
								}
								else
								{
									arrReplacementValue[4]="";
								}
								
								strVariable = "";
								arrVariable = null;
								strElement = "";
								strOutput = "";
								strVariable = dt.Rows[0]["ks176"].ToString();
								if(strVariable.Length > 0)
								{
									string[] arrVariable = strVariable.Split(' ');
									if(arrVariable.Length>0)
									{
										foreach(string variable in arrVariable)
										{
											strElement = variable;
											strElement = strElement.Substring(0,1).ToUpper()+strElement.Substring(1).ToLower();
											strOutput += strElement+" ";
										}
									}
									else
										strOutput = strVariable.Substring(0,1).ToUpper()+strVariable.Substring(1).ToLower();
									
									arrReplacementValue[5]=strOutput;
								}
								else
								{
									arrReplacementValue[5]="";
								}
								
								arrReplacementValue[6]=dt.Rows[0]["ks177"].ToString();
								
								strVariable = "";
								arrVariable = null;
								strElement = "";
								strOutput = "";
								strOutput2="";
								
								strVariable = dt.Rows[0]["ks178"].ToString();
								arrVariable = strVariable.Split(' ');
								strElement = arrVariable[0].Trim();
								strOutput = strElement.Substring(0,5);
								strOutput2 = strElement.Substring(strElement.Length -4,4);
								if(strOutput2.Length>0)
									strOutput = strOutput+strOutput2;
								
								arrReplacementValue[7] = strOutput;
								arrReplacementValue[13] = strCarrierName;
								arrReplacementValue[16]= strCarrierName;
								
								if(arrReplacementValue[4].Length == 0)
								{
									arrReplacementValue[4] = arrReplacementValue[5]+" "+arrReplacementValue[6]+" "+arrReplacementValue[7];
									arrReplacementValue[5]="";
									arrReplacementValue[6]="";
									arrReplacementValue[7]="";
								}
								else
								{
									arrReplacementValue[4]=arrReplacementValue[4];
								}
								string strInput = app.CurrentUser.Name;
								sql  = "select PHONE, NAME  FROM WORKSTAT (NOLOCK) WHERE (EMAILADDR = '"+strInput+"') OR (AWS_NUM='"+strInput+"');";
								dt.Clear();
								dt = SelectDataRows(strConn, sql);
								string strExtension = dt.Rows[0][0].ToString();
								string strName = dt.Rows[0][1].ToString();
								
								strFirstName="";
								strLastName = "";
								iPos = strName.IndexOf(',');
								if(iPos>0)
									arrBeneficiary=strName.Split(',');
								else
									arrBeneficiary=strName.Split(' ');
								
								strLastName=arrBeneficiary[0].Trim();
								strLastName = strLastName.Substring(0,1).ToUpper()+strLastName.Substring(1).ToLower();
								
								if(arrBeneficiary.Length>0)
									strFirstName = arrBeneficiary[1];
								
								arrFirstName = strFirstName.Split(' ');
								strFirstName = arrFirstName[0].Trim();
								strFirstName = strFirstName.Substring(0,1).ToUpper()+strFirstName.Substring(1).ToLower();
								
								strEmployeeName = strFirstName+" "+strLastName;
								
								arrReplacementValue[8]=strEmployeeName;
								arrReplacementValue[9]=strEmployeeName;
								arrReplacementValue[10]=strExtension;
								
								string strFormSaveAs = string.Empty;
								string strFormTemplate = "";
								string strLetterSaveAs="";
								string strLetterTemplate = "";
								
								string sImportPath = @"\\CORP.RGHENT.COM\ONB\PRD_SRC\Billing\OnBase Forms\";
								string sOutputPath = @"\\CORP.RGHENT.COM\ONB\PRD_SRC\Billing\";
								
								switch(Queue)
								{
									case "171":
									case "176":
									case "185":
										strFormTemplate = sImportPath+"MedicareQuestionnaire.doc";
										strLetterTemplate = sImportPath+"OnBase Denial Letter - Medicare.doc";
										strFormSaveAs = sOutputPath+"MedicareOther\\MedicareQuestionnaire_"+strAccountNumber+"_"+strDateTime+".doc";
										strLetterSaveAs = sOutputPath+"MedicareOther\\Medicare_Denial_Letter_"+strAccountNumber+"_"+strDateTime+".doc";
										arrReplacementValue[12]="*E0139125"+strAccountNumber+"*";
										arrReplacementValue[15]="*E0139225"+strAccountNumber+"*";
										break;
									case "209":
										strFormTemplate = sImportPath+"HMOQuestionnaire.doc";
										strLetterTemplate = sImportPath+"OnBase Denial Letter - HMO Revised.doc";
										strFormSaveAs = sOutputPath+"HMOOther\\HMOQuestionnaire_"+strAccountNumber+"_"+strDateTime+".doc";
										strLetterSaveAs = sOutputPath+"HMOOther\\HMO_Denial_Letter_OI_"+strAccountNumber+"_"+strDateTime+".doc";
										arrReplacementValue[12]="*E0139115"+strAccountNumber+"*";
										break;
									case "214":
										strFormTemplate = sImportPath+"HMOQuestionnaire.doc";
										strLetterTemplate = sImportPath+"OnBase Denial Letter - HMO Revised.doc";
										strFormSaveAs = sOutputPath+"HMOOther\\HMOQuestionnaire_"+strAccountNumber+"_"+strDateTime+".doc";
										strLetterSaveAs = sOutputPath+"HMOOther\\HMO_Denial_Letter_IS_"+strAccountNumber+"_"+strDateTime+".doc";
										arrReplacementValue[12]="*E0139115"+strAccountNumber+"*";
										break;
									case "223":
										strFormTemplate = sImportPath+"HMOQuestionnaire.doc";
										strLetterTemplate = sImportPath+"OnBase Denial Letter - HMO Revised.doc";
										strFormSaveAs = sOutputPath+"HMOOther\\HMOQuestionnaire_"+strAccountNumber+"_"+strDateTime+".doc";
										strLetterSaveAs = sOutputPath+"HMOOther\\HMO_Denial_Letter_COB_"+strAccountNumber+"_"+strDateTime+".doc";
										arrReplacementValue[12]="*E0139115"+strAccountNumber+"*";
										break;
								}
								object fileName = strFormTemplate;
								Microsoft.Office.Interop.Word.Application wordApp = new Microsoft.Office.Interop.Word.Application { Visible = false };
								Microsoft.Office.Tools.Word.Document aDoc = wordApp.Documents.Open(fileName, ReadOnly: false, Visible: false);
								aDoc.Activate();
								for(int i=0;i<arrSearchValue.Length;i++)
								{
									FindAndReplace(wordApp, arrSearchValue[i], arrReplacementValue[i]);
								}
								aDoc.SaveAs2(strFormSaveAs,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
								aDoc.Close();	
								aDoc.Dispose();
								
								fileName = strLetterTemplate;
								wordApp = new Microsoft.Office.Interop.Word.Application { Visible = false };
								aDoc = wordApp.Documents.Open(fileName, ReadOnly: false, Visible: false);
								aDoc.Activate();
								for(int i=0;i<arrSearchValue.Length;i++)
								{
									FindAndReplace(wordApp, arrSearchValue[i], arrReplacementValue[i]);
								}
								aDoc.SaveAs2(strLetterSaveAs,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
								aDoc.Close();
								aDoc.Dispose();
									
								}
								
								
								
								break;
					}
						break;
		
				}
				
			}
			catch(Exception ex)
			{
				app.Diagnostics.Write(ex);
			}
			
			
        }
		private void FindAndReplace(Microsoft.Office.Interop.Word.Application doc, object findText, object replaceWithText)
		{
		    //options
		    object matchCase = false;
		    object matchWholeWord = false;
		    object matchWildCards = true;
		    object matchSoundsLike = false;
		    object matchAllWordForms = false;
		    object forward = true;
		    object format = false;
		    object matchKashida = false;
		    object matchDiacritics = false;
		    object matchAlefHamza = false;
		    object matchControl = false;
		    object read_only = false;
		    object visible = false;
		    object replace = 2;
		    object wrap = 1;
		    //execute find and replace
		    doc.Selection.Find.Execute(ref findText, ref matchCase, ref matchWholeWord,
		        ref matchWildCards, ref matchSoundsLike, ref matchAllWordForms, ref forward, ref wrap, ref format, ref replaceWithText, ref replace,
		        ref matchKashida ,ref matchDiacritics, ref matchAlefHamza, ref matchControl);                
		}
		private void SetKeywordValues(Hyland.Unity.Document document)
		{
			try
		   	{
		   		foreach(KeywordRecord keywordRecord in document.KeywordRecords)
		        {
		        	foreach(Keyword keyword in keywordRecord.Keywords)
		            {
		            	switch (keyword.KeywordType.Name)
		                {
		                   case "AR - Account Number":
								strAccountNumber = keyword.IsBlank?string.Empty:keyword.Value.ToString();
								break;
							case "AR - Carrier Name":
								strCarrierName = keyword.IsBlank?string.Empty:keyword.Value.ToString();
								break;
							case "AR - Account Name":
								strAccountName = keyword.IsBlank?string.Empty:keyword.Value.ToString();
								break;
						}
					}
				}
		   }
		   catch(Exception ex)
		   {
		   		_app.Diagnostics.Write(ex);
		   }
		}
		private DataTable SelectDataRows(string dbConnectionString,string queryString)
		{
			DataTable dt = new DataTable();
			try
			{
				using (SqlConnection connection =  new SqlConnection(dbConnectionString))
			    {
			        SqlDataAdapter adapter = new SqlDataAdapter();
			        adapter.SelectCommand = new SqlCommand(queryString, connection);
			        adapter.Fill(dt);
			    }
			}
			catch(Exception ex)
			{
				_app.Diagnostics.Write("Error while fetching records Method: SelectDataRows ");
				_app.Diagnostics.Write(ex);
			}
			return dt;
		}
		private void ModifyKeywordInCurrentDocument(Hyland.Unity.Document doc, string keywordType, string keywordValue)
		{
			using(DocumentLock documentLock = doc.LockDocument())
			{
				if(documentLock.Status == DocumentLockStatus.LockObtained)
				{
					KeywordModifier keymod = doc.CreateKeywordModifier();
					KeywordType keyType = _app.Core.KeywordTypes.Find(keywordType);
					if(keyType == null)
					{
						throw new Exception("Keyword Type "+ keywordType + " not found.")	;
						
					}
					else
					{
						//KeywordRecord keyRec = doc.KeywordRecords.Find(keyType);
						//KeywordRecordType keyRecType = keyRec.KeywordRecordType;			
						
						Keyword newKeyword = keyType.CreateKeyword(keywordValue);
						foreach(KeywordRecord keyrec in doc.KeywordRecords)
						{
							if(keyrec.KeywordRecordType.RecordType == RecordType.MultiInstance)
							{
								EditableKeywordRecord editKeyRec = keyrec.CreateEditableKeywordRecord();
								Keyword keyword = editKeyRec.Keywords.Find(keywordType);
								if(keyword != null)
									editKeyRec.UpdateKeyword(keyword, newKeyword);
								else
									editKeyRec.AddKeyword(keywordType, keywordValue);
								
								keymod.AddKeywordRecord(editKeyRec);
							}
							else
							{
								Keyword keyword = keyrec.Keywords.Find(keywordType);
								if(keyword != null)
									keymod.UpdateKeyword(keyword, newKeyword);
								else
									keymod.AddKeyword(keywordType, keywordValue);
							}
						}
						
					}
					keymod.ApplyChanges();					
				}
			}
		}
        #endregion
    }
}
