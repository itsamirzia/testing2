// Skeleton generated by Hyland Unity Editor on 3/17/2021 12:18:40 AM
namespace testam
{
    using System;
    using System.Text;
    using Hyland.Unity;
    using Hyland.Unity.CodeAnalysis;
    using Hyland.Unity.Workflow;
	using System.IO;
	using System.Data;
	using System.Data.SqlClient;
    
    
    /// <summary>
    /// testam
    /// </summary>
    public class testam2 : Hyland.Unity.IWorkflowScript
    {

		Application _app = null;
		string sAcctNum = string.Empty;
		string sBarcode = string.Empty;
		bool foundUnparsedBarcode = false;
		bool foundARAccountNum = false;
        #region IWorkflowScript
        /// <summary>
        /// Implementation of <see cref="IWorkflowScript.OnWorkflowScriptExecute" />.
        /// <seealso cref="IWorkflowScript" />
        /// </summary>
        /// <param name="app"></param>
        /// <param name="args"></param>
        public void OnWorkflowScriptExecute(Hyland.Unity.Application app, Hyland.Unity.WorkflowEventArgs args)
        {
            
			try
			{
				string sDocTypeNum = string.Empty;
				string sPages = string.Empty;
				int sBarcodeLen = 0;
				_app = app;
				Document doc = args.Document;
				SetKeywordValues(doc);
				if(sBarcode.Length>0)
				{
					sDocTypeNum = sBarcode.Substring(1,4);
					sPages = sBarcode.Substring(5,2);
					sBarcodeLen = sBarcode.Length;
					sAcctNum = sBarcode.Substring(7);
					foundUnparsedBarcode = true;

				}
				if(foundUnparsedBarcode)
				{
					ModifyKeywordInCurrentDocument(doc, "AR - Account Number", sAcctNum);
				}
				
			}
			catch(Exception ex)
			{
				app.Diagnostics.Write(ex);
			}
			
			
        }
		
		private void ModifyKeywordInCurrentDocument(Document doc, string keywordType, string keywordValue)
		{
			using(DocumentLock documentLock = doc.LockDocument())
			{
				if(documentLock.Status == DocumentLockStatus.LockObtained)
				{
					KeywordModifier keymod = doc.CreateKeywordModifier();
					KeywordType keyType = _app.Core.KeywordTypes.Find(keywordType);
					if(keyType == null)
					{
						keymod.AddKeyword(keywordType,keywordValue);		
						
					}
					else
					{
						KeywordRecord keyRec = doc.KeywordRecords.Find(keyType);
						KeywordRecordType keyRecType = keyRec.KeywordRecordType;			
						
						Keyword newKeyword = keyType.CreateKeyword(keywordValue);
						
						if(keyRecType.RecordType== RecordType.MultiInstance)
						{
							EditableKeywordRecord editKeyRec = keyRec.CreateEditableKeywordRecord();
							Keyword keyword = editKeyRec.Keywords.Find(keywordType);
							if(keyword != null)
							{
								editKeyRec.UpdateKeyword(keyword, newKeyword);
							}
							else
							{
								editKeyRec.AddKeyword(keywordType, keywordValue);
							}
							
							keymod.AddKeywordRecord(editKeyRec);
							
						}
						else
						{
							Keyword keyword = keyRec.Keywords.Find(keywordType);
							if(keyword!=null)
								keymod.UpdateKeyword(keyword, newKeyword);
							else
								keymod.AddKeyword(keywordType, keywordValue);
						}
					}
					keymod.ApplyChanges();					
				}
			}
		}
		private void SetKeywordValues(Document document)
		{
			try
		   	{
		   		foreach(KeywordRecord keywordRecord in document.KeywordRecords)
		        {
		        	foreach(Keyword keyword in keywordRecord.Keywords)
		            {
		            	switch (keyword.KeywordType.Name)
		                {
							case "AR - Unparsed Barcode":
								sBarcode = keyword.IsBlank? string.Empty: keyword.Value.ToString();
								break;
							case "AR - Account Number":
								foundARAccountNum = true;
								break;
		                    
						}
					}
				}
		   }
		   catch(Exception ex)
		   {
		   		_app.Diagnostics.Write(ex);
		   }
		}
		
        #endregion
    }
}
