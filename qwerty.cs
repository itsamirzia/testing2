// Skeleton generated by Hyland Unity Editor on 3/17/2021 12:18:40 AM
namespace testam
{
    using System;
    using System.Text;
    using Hyland.Unity;
    using Hyland.Unity.CodeAnalysis;
    using Hyland.Unity.Workflow;
	using System.IO;
	
    /// <summary>
    /// testam
    /// </summary>
    public class testam2 : Hyland.Unity.IWorkflowScript
    {
		string strInvoiceNumber = string.Empty;
		string InvoiceNumberFound = string.Empty;
		Hyland.Unity.Application _app= null;
        #region IWorkflowScript
        /// <summary>
        /// Implementation of <see cref="IWorkflowScript.OnWorkflowScriptExecute" />.
        /// <seealso cref="IWorkflowScript" />
        /// </summary>
        /// <param name="app"></param>
        /// <param name="args"></param>
        public void OnWorkflowScriptExecute(Hyland.Unity.Application app, Hyland.Unity.WorkflowEventArgs args)
        {
            
			try
			{
				_app = app;
				Document doc = args.Document;
				SetKeywordValues(doc);
				if(InvoiceNumberFound=="Y")
				{
					long documentHandle = doc.ID;
					string strFileName = documentHandle + ".pcl";
					string strFilePath=@"\\CORP.RGHENT.COM\ONB\PRD_SRC\Temp\";
					if(SaveToDisc(doc,strFilePath+strFileName))
					{
						string strSearchString = File.ReadAllText(strFilePath+strFileName);
						string strSearch = string.Empty;
						string strSearch2 = string.Empty;
						string strSearchString2 = string.Empty;
						strSearch = "INVOICE #:";
						string strSearchEOF = "REMIT TO:";
						int aPos = strSearchString.IndexOf(strSearch,0);
						if(aPos>0)
						{
							strInvoiceNumber = strSearchString.Substring(aPos);
							strSearchString2 = strSearchString.Substring(aPos+10,12);
							strInvoiceNumber = strSearchString2;
							ModifyKeywordInCurrentDocument(doc,"AR - Invoice Number",strInvoiceNumber);
							File.Delete(strFilePath+strFileName)	;
						}
						
					}
				}
				
			}
			catch(Exception ex)
			{
				app.Diagnostics.Write(ex);
			}
			
			
        }
		private bool SaveToDisc(Document doc, string filePathWithName)
		{
			try
			{
				Rendition rend = doc.DefaultRenditionOfLatestRevision;
				DefaultDataProvider ddp = _app.Core.Retrieval.Default;
				using(PageData pd = ddp.GetDocument(rend))
				{
					Utility.WriteStreamToFile(pd.Stream, filePathWithName);
				}
				return true;
			}
			catch(Exception ex)
			{
				_app.Diagnostics.Write(ex);
				return false;
			}
		}
		private void ModifyKeywordInCurrentDocument(Document doc, string keywordType, string keywordValue)
		{
			using(DocumentLock documentLock = doc.LockDocument())
			{
				if(documentLock.Status == DocumentLockStatus.LockObtained)
				{
					KeywordModifier keymod = doc.CreateKeywordModifier();
					KeywordType keyType = _app.Core.KeywordTypes.Find(keywordType);
					if(keyType == null)
					{
						keymod.AddKeyword(keywordType,keywordValue);		
						
					}
					else
					{
						KeywordRecord keyRec = doc.KeywordRecords.Find(keyType);
						KeywordRecordType keyRecType = keyRec.KeywordRecordType;			
						
						Keyword newKeyword = keyType.CreateKeyword(keywordValue);
						
						if(keyRecType.RecordType== RecordType.MultiInstance)
						{
							EditableKeywordRecord editKeyRec = keyRec.CreateEditableKeywordRecord();
							Keyword keyword = editKeyRec.Keywords.Find(keywordType);
							editKeyRec.UpdateKeyword(keyword, newKeyword);
							keymod.AddKeywordRecord(editKeyRec);
							
						}
						else
						{
							Keyword keyword = keyRec.Keywords.Find(keywordType);
							keymod.UpdateKeyword(keyword, newKeyword);
						}
					}
					keymod.ApplyChanges();					
				}
			}
		}
		private void SetKeywordValues(Document document)
		{
			try
		   	{
		   		foreach(KeywordRecord keywordRecord in document.KeywordRecords)
		        {
		        	foreach(Keyword keyword in keywordRecord.Keywords)
		            {
		            	switch (keyword.KeywordType.Name)
		                {
		                   case "AR - Invoice Number":
								strInvoiceNumber = keyword.IsBlank?string.Empty:keyword.Value.ToString();
								InvoiceNumberFound = "Y";
								break;
						}
					}
				}
		   }
		   catch(Exception ex)
		   {
		   		_app.Diagnostics.Write(ex);
		   }
		}
		
        #endregion
    }
}
