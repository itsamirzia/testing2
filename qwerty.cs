// Skeleton generated by Hyland Unity Editor on 3/17/2021 12:18:40 AM
namespace testam
{
    using System;
    using System.Text;
    using Hyland.Unity;
    using Hyland.Unity.CodeAnalysis;
    using Hyland.Unity.Workflow;
	using System.IO;
	
    /// <summary>
    /// testam
    /// </summary>
    public class testam2 : Hyland.Unity.IWorkflowScript
    {
		Hyland.Unity.Application _app= null;
        #region IWorkflowScript
        /// <summary>
        /// Implementation of <see cref="IWorkflowScript.OnWorkflowScriptExecute" />.
        /// <seealso cref="IWorkflowScript" />
        /// </summary>
        /// <param name="app"></param>
        /// <param name="args"></param>
        public void OnWorkflowScriptExecute(Hyland.Unity.Application app, Hyland.Unity.WorkflowEventArgs args)
        {
         	_app=app;   
			try
			{
				string sBarcode = string.Empty;
				Document document = args.Document;
				long docHandle = document.ID;
				string fileName = docHandle+".tmp";
				string filepath = @"\\MDC\ONB\PRD_SRC\Temp\";
				SaveToDisc(document, filepath+fileName);
				
				string allText = File.ReadAllText(filepath+fileName);
				
				string[] allTextLines = allText.Split(new[]{"\r\n"},StringSplitOptions.RemoveEmptyEntries)	;
				foreach(string line in allTextLines)
				{
					int iPos = line.IndexOf("*E0104",0);
					if(iPos>0)
					{
						sBarcode = line.Substring(line.Length-iPos);
						break;
					}
				}
				if(sBarcode != string.Empty)
				{
					sBarcode = sBarcode.Trim();
					sBarcode = sBarcode.Replace("*","");
					string sAccountNumber = sBarcode.Substring(sBarcode.Length-15);
					string sCreationDate = sBarcode.Substring(7,8);
					string sMonth = sCreationDate.Substring(0,2);
					string sDay = sCreationDate.Substring(2,2);
					string sYear = sCreationDate.Substring(4,4);
					sCreationDate = sMonth+"/"+sDay+"/"+sYear;
					ModifyKeywordInCurrentDocument(document,"AR - Account Number",sAccountNumber);
					if(sCreationDate.Length==10)
						ModifyKeywordInCurrentDocument(document,"AR - Creation Date",sCreationDate);
				}
				File.Delete(filepath+fileName);
				
			}
			catch(Exception ex)
			{
				app.Diagnostics.Write(ex);
			}
			
			
        }
		private bool SaveToDisc(Document doc, string filePathwithName)
		{
			try
			{
				Rendition rend = doc.DefaultRenditionOfLatestRevision;
				DefaultDataProvider ddp = _app.Core.Retrieval.Default;
				using(PageData dp = ddp.GetDocument(rend))
				{
					Utility.WriteStreamToFile(dp.Stream, filePathwithName);
					return true;
				}
			}
			catch
			{
				return false;
			}
			
		}
		private void ModifyKeywordInCurrentDocument(Document doc, string keywordType, string keywordValue)
		{
			using(DocumentLock documentLock = doc.LockDocument())
			{
				if(documentLock.Status == DocumentLockStatus.LockObtained)
				{
					KeywordModifier keymod = doc.CreateKeywordModifier();
					KeywordType keyType = _app.Core.KeywordTypes.Find(keywordType);
					if(keyType == null)
					{
						keymod.AddKeyword(keywordType,keywordValue);		
						
					}
					else
					{
						KeywordRecord keyRec = doc.KeywordRecords.Find(keyType);
						KeywordRecordType keyRecType = keyRec.KeywordRecordType;			
						
						Keyword newKeyword = keyType.CreateKeyword(keywordValue);
						
						if(keyRecType.RecordType== RecordType.MultiInstance)
						{
							EditableKeywordRecord editKeyRec = keyRec.CreateEditableKeywordRecord();
							Keyword keyword = editKeyRec.Keywords.Find(keywordType);
							editKeyRec.UpdateKeyword(keyword, newKeyword);
							keymod.AddKeywordRecord(editKeyRec);
							
						}
						else
						{
							Keyword keyword = keyRec.Keywords.Find(keywordType);
							keymod.UpdateKeyword(keyword, newKeyword);
						}
					}
					keymod.ApplyChanges();					
				}
			}
		}
        #endregion
    }
}
