
// Skeleton generated by Hyland Unity Editor on 3/17/2021 12:18:40 AM
namespace testam
{
    using System;
    using System.Text;
    using Hyland.Unity;
    using Hyland.Unity.CodeAnalysis;
    using Hyland.Unity.Workflow;
    using System.IO;
    using System.Data;
    using System.Data.SqlClient;
    using Independentsoft.Msg;
    
    
    /// <summary>
    /// testam
    /// </summary>
    public class testam2 : Hyland.Unity.IWorkflowScript
    {

		Application _app = null;
		
        #region IWorkflowScript
        /// <summary>
        /// Implementation of <see cref="IWorkflowScript.OnWorkflowScriptExecute" />.
        /// <seealso cref="IWorkflowScript" />
        /// </summary>
        /// <param name="app"></param>
        /// <param name="args"></param>
        public void OnWorkflowScriptExecute(Hyland.Unity.Application app, Hyland.Unity.WorkflowEventArgs args)
        {
            
			try
			{
				string strConnecTm = string.Empty;
				string strExplanation = string.Empty;
				string strFaxLine = string.Empty;
				string strFaxServer = string.Empty;
				string strJID = string.Empty;
				string strPages = string.Empty;
				string ssRecipient = string.Empty;
				string strXmitResult = string.Empty;
				string strRetryCt = string.Empty;
				string strStatusCD = string.Empty;
				string strSubject = string.Empty;
				string strTransmitTm = string.Empty;
				string strUID = string.Empty;
				string strSubjectRGHID = string.Empty;
				string strSubjectRGHType = string.Empty;
				string strFailSuccess = string.Empty;
				string strResult = string.Empty;
				string strRecipient = string.Empty;
				
				Document doc = args.Document;
				
				string messageBody = GetFileText(doc);
				
				string[] messageBodyArray = messageBody.Split(new[]{"\r\n"}, StringSplitOptions.RemoveEmptyEntries);
				
				foreach(string line in messageBodyArray)
				{
					
						if(line.ToUpper().Contains("RECIPIENT AT"))
						{
							string[] splitCell = line.Split(new[]{"at "}, StringSplitOptions.RemoveEmptyEntries);
							string strCell = splitCell[1];
							strRecipient = strCell;
						}
						if(line.ToUpper().Contains("SUBJECT:"))
						{
							if(line.ToUpper().Contains("FAX:"))
							{}
							else
							{
								string[] splitCell = line.Split(new[]{":"}, StringSplitOptions.RemoveEmptyEntries);
								string strCell = splitCell[1].Trim();
								strCell = strCell.Replace(" ","*");
								var strSplitCell = strCell.Split('*');
								strSubject = strCell;
								if(strSubject.ToUpper().Contains("**-M"))
								{
									strSubjectRGHType = strSplitCell[2].Trim();
									strSubjectRGHID = strSplitCell[3].Trim();
								}
								else
								{
									strSubjectRGHType = strSplitCell[1].Trim();
									strSubjectRGHType = strSubjectRGHType.Replace("-","");
									strSubjectRGHID = strSplitCell[2].Trim();
								}
							}
							strSubject = strSubject.Replace("*","");
						}
						if(line.ToUpper().Contains("RESULT:"))
						{
							string[] splitCell = line.Split(':');
							string strCell = splitCell[1];
							strCell = strCell.Trim();
							strResult = strCell;
							if(line.ToUpper().Contains("SUCCESSFUL"))
								strFailSuccess = "SUCCESS";
							else
								strFailSuccess = "FAIL";
						}
						if(line.ToUpper().Contains("EXPLANATION:"))
						{
							string[] strSplitCell = line.Split(':');
							string strCell = strSplitCell[1];
							strCell = strCell.Trim();
							strExplanation = strCell;
						}
						if(line.ToUpper().Contains("PAGES SENT:"))
						{
							string[] strSplitCell = line.Split(':');
							string strCell = strSplitCell[1];
							strCell = strCell.Trim();
							strPages = strCell;
						}
						if(line.ToUpper().Contains("CONNECT TIME:"))
						{
							string[] strSplitCell = line.Split(':');
							string strCell = strSplitCell[1];
							strCell = strCell.Trim();
							strConnecTm = strCell;
						}
						if(line.ToUpper().Contains("TRANSMIT TIME:"))
						{
							string[] strSplitCell = line.Split(':');
							string strCell = strSplitCell[1]+":"+strSplitCell[2];
							strCell = strCell.Trim();
							strTransmitTm = strCell;
						}
						if(line.ToUpper().Contains("STATUS CODE:"))
						{
							string[] strSplitCell = line.Split(':');
							string strCell = strSplitCell[1];
							strCell = strCell.Trim();
							strStatusCD = strCell;
						}
						if(line.ToUpper().Contains("RETRY COUNT:"))
						{
							string[] strSplitCell = line.Split(':');
							string strCell = strSplitCell[1];
							strCell = strCell.Trim();
							strRetryCt = strCell;
						}
						if(line.ToUpper().Contains("JOB ID:"))
						{
							string[] strSplitCell = line.Split(':');
							string strCell = strSplitCell[1];
							strCell = strCell.Trim();
							strJID = strCell;
						}
						if(line.ToUpper().Contains("UNIQUE ID:"))
						{
							string[] strSplitCell = line.Split(':');
							string strCell = strSplitCell[1];
							strCell = strCell.Trim();
							strUID = strCell;
						}
						if(line.ToUpper().Contains("FAX LINE:"))
						{
							string[] strSplitCell = line.Split(':');
							string strCell = strSplitCell[1];
							strCell = strCell.Trim();
							strFaxLine = strCell;
						}
						if(line.ToUpper().Contains("FAX SERVER:"))
						{
							string[] strSplitCell = line.Split(':');
							string strCell = strSplitCell[1];
							strCell = strCell.Trim();
							strFaxServer = strCell;
						}
					//}
				}
				if(strConnecTm.Length > 0)
					ModifyKeywordInCurrentDocument(doc, "XMIT - CONNECT TIME", strConnecTm);
				
				if(strExplanation.Length>0)
					ModifyKeywordInCurrentDocument(doc, "XMIT - EXPLANATION", strExplanation);
				
				if(strFaxLine.Length>0)
					ModifyKeywordInCurrentDocument(doc, "XMIT - FAX LINE", strFaxLine);
				
				if(strFaxServer.Length>0)
					ModifyKeywordInCurrentDocument(doc, "XMIT - FAX SERVER", strFaxServer);
				
				if(strJID.Length>0)
					ModifyKeywordInCurrentDocument(doc, "XMIT - JOB ID", strJID);
				
				if(strPages.Length>0)
					ModifyKeywordInCurrentDocument(doc, "XMIT - PAGES", strPages);
				
				if(strRecipient.Length>0)
					ModifyKeywordInCurrentDocument(doc, "XMIT - RECIPIENT", strRecipient);
				
				if(strResult.Length>0)
					ModifyKeywordInCurrentDocument(doc, "XMIT - RESULT", strResult);
				
				if(strRetryCt.Length>0)
					ModifyKeywordInCurrentDocument(doc, "XMIT - RETRY COUNT", strRetryCt);
				
				if(strStatusCD.Length>0)
					ModifyKeywordInCurrentDocument(doc, "XMIT - STATUS CODE", strStatusCD);
				
				if(strSubject.Length>0)
					ModifyKeywordInCurrentDocument(doc, "XMIT - SUBJECT", strSubject);
				
				if(strTransmitTm.Length>0)
					ModifyKeywordInCurrentDocument(doc, "XMIT - TRANSMIT TIME", strTransmitTm);
				
				if(strUID.Length>0)
					ModifyKeywordInCurrentDocument(doc, "XMIT - UNIQUE ID", strUID);
				
				if(strSubjectRGHID.Length>0)
					ModifyKeywordInCurrentDocument(doc, "XMIT - RGH ID", strSubjectRGHID);
				
				if(strSubjectRGHType.Length>0)
					ModifyKeywordInCurrentDocument(doc, "XMIT - RGH TYPE", strSubjectRGHType);
				
				if(strFailSuccess.Length>0)
					ModifyKeywordInCurrentDocument(doc, "XMIT - FAILSUCCESS", strFailSuccess);
				
				
			}
			catch(Exception ex)
			{
				app.Diagnostics.Write(ex);
			}
			
			
        }
		private string GetFileText(Document doc)
		{
			try
			{
				Rendition docRendition = doc.DefaultRenditionOfLatestRevision;
				string tempPath = @"\\Cardinalhealth.net\applications\EC500\ONB\PRD_SYS\Diskgroups\EP\";
				//sbLogs.AppendLine(tempFilename);
				DefaultDataProvider ddp = _app.Core.Retrieval.Default;
				using (PageData pageData = ddp.GetDocument(docRendition))
				{
					
					using (Stream stream = pageData.Stream)
				  	{
						string fileNamePath = tempPath+doc.ID+pageData.Extension;
						Utility.WriteStreamToFile(stream, fileNamePath);
						Message msg = new Message(fileNamePath);
						string data = msg.Body;
//						string data = File.ReadAllText(fileNamePath);
						File.Delete(fileNamePath);
						return data;
				  	}
				}
			}
			catch(Exception ex)
			{
				//sbLogs.AppendLine(ex.Message);
				_app.Diagnostics.Write("Exception in GetXMLString: "+ex);
				return string.Empty;
			}
		}
		private void ModifyKeywordInCurrentDocument(Document doc, string keywordType, string keywordValue)
		{
			using(DocumentLock documentLock = doc.LockDocument())
			{
				if(documentLock.Status == DocumentLockStatus.LockObtained)
				{
					KeywordModifier keymod = doc.CreateKeywordModifier();
					KeywordType keyType = _app.Core.KeywordTypes.Find(keywordType);
					Keyword newKeyword = keyType.CreateKeyword(keywordValue);
					if(keyType == null)
					{
						keymod.AddKeyword(keywordType,keywordValue);		
						
					}
					else
					{
						foreach(KeywordRecord keyRec in doc.KeywordRecords)
						{
							if(keyRec.KeywordRecordType.RecordType == RecordType.MultiInstance)
							{
								EditableKeywordRecord editKeyRec = keyRec.CreateEditableKeywordRecord();
								Keyword keyword = editKeyRec.Keywords.Find(keywordType);
								if(keyword != null)
								{
									editKeyRec.UpdateKeyword(keyword, newKeyword);
								}
								else
								{
									editKeyRec.AddKeyword(keywordType, keywordValue);
								}
								
								keymod.AddKeywordRecord(editKeyRec);
							}
							else
							{
								Keyword keyword = keyRec.Keywords.Find(keywordType);
							if(keyword!=null)
								keymod.UpdateKeyword(keyword, newKeyword);
							else
								keymod.AddKeyword(keywordType, keywordValue);
							}
						}
					}
					keymod.ApplyChanges();					
				}
			}
		}

		
        #endregion
    }
}
