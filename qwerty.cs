
// Skeleton generated by Hyland Unity Editor on 3/17/2021 12:18:40 AM
namespace testam
{
    using System;
    using System.Text;
    using Hyland.Unity;
    using Hyland.Unity.CodeAnalysis;
    using Hyland.Unity.Workflow;
	using System.IO;
    
    
    /// <summary>
    /// testam
    /// </summary>
    public class testam : Hyland.Unity.IWorkflowScript
    {
		bool foundAccount = false;
		bool foundWoundCancelledBy = false;
		bool foundWoundCareToRGH = false;
		string sAccount = string.Empty;
		string sWoundCareToRGH = string.Empty;
		string sWoundCancelledBy = string.Empty;
		
		Hyland.Unity.Application _app = null;
        #region IWorkflowScript
        /// <summary>
        /// Implementation of <see cref="IWorkflowScript.OnWorkflowScriptExecute" />.
        /// <seealso cref="IWorkflowScript" />
        /// </summary>
        /// <param name="app"></param>
        /// <param name="args"></param>
        public void OnWorkflowScriptExecute(Hyland.Unity.Application app, Hyland.Unity.WorkflowEventArgs args)
        {
			//string sTimeStamp = string.Empty;
			Document doc = args.Document;
			SetKeywordValues(doc);
			if(foundAccount && foundWoundCancelledBy)
			{
				string sTimeStamp = System.DateTime.Now.ToString("MMddyyyyHHmmss");
				string oFilePath = @"\\CORP.RGHENT.COM\ONB\PRD_SRC\BKOEXP\WoundCare\";
   				string oFileName = "WoundCare" + "_" + sAccount + "_" + sTimeStamp + ".txt";
				string oFilePathName = oFilePath + oFileName;
   				string oPatientInfo = sAccount + "|N|" + sWoundCancelledBy;
				File.AppendAllText(oFileName, oPatientInfo);
				if(foundWoundCareToRGH = true)
					ModifyKeywordInCurrentDocument(doc,"MD - RGH File",oFilePath);
				else
					ModifyKeywordInCurrentDocument(doc,"MD - MWC Cancelled RGH File",oFilePathName);
			}
			
        }
		private void ModifyKeywordInCurrentDocument(Document doc, string keywordType, string keywordValue)
		{
			using(DocumentLock documentLock = doc.LockDocument())
			{
				if(documentLock.Status == DocumentLockStatus.LockObtained)
				{
					KeywordModifier keymod = doc.CreateKeywordModifier();
					KeywordType keyType = _app.Core.KeywordTypes.Find(keywordType);
					if(keyType == null)
					{
						keymod.AddKeyword(keywordType,keywordValue);		
						
					}
					else
					{
						KeywordRecord keyRec = doc.KeywordRecords.Find(keyType);
						KeywordRecordType keyRecType = keyRec.KeywordRecordType;			
						
						Keyword newKeyword = keyType.CreateKeyword(keywordValue);
						
						if(keyRecType.RecordType== RecordType.MultiInstance)
						{
							EditableKeywordRecord editKeyRec = keyRec.CreateEditableKeywordRecord();
							Keyword keyword = editKeyRec.Keywords.Find(keywordType);
							editKeyRec.UpdateKeyword(keyword, newKeyword);
							keymod.AddKeywordRecord(editKeyRec);
							
						}
						else
						{
							Keyword keyword = keyRec.Keywords.Find(keywordType);
							keymod.UpdateKeyword(keyword, newKeyword);
						}
					}
					keymod.ApplyChanges();					
				}
			}
		}
		private void SetKeywordValues(Document document)
		{
			try
		   	{
		   		foreach(KeywordRecord keywordRecord in document.KeywordRecords)
		        {
		        	foreach(Keyword keyword in keywordRecord.Keywords)
		            {
		            	switch (keyword.KeywordType.Name)
		                {
							case "Account # A":
								sAccount = keyword.Value.ToString().Trim();
								foundAccount = true;
								break;
							case "MD - RGH File":
								sWoundCareToRGH = keyword.Value.ToString().Trim();
								foundWoundCareToRGH = true;
								break;
							case "Cancelled By":
								sWoundCancelledBy = keyword.Value.ToString().Trim();
								foundWoundCancelledBy = true;
								break;
		                   
						}
					}
				}
		   }
		   catch(Exception ex)
		   {
		   		_app.Diagnostics.Write(ex);
		   }
		}
		
        #endregion
    }
}
